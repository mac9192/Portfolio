.row{                                                                           /* Start with the ROW */

        max-width: $grid-width;                                                 /* (Transfered to "_variables.scss)We must define a width for the ROW. One of the standards is to use an 1140px grid. But we need to convert to REM. 1140/10 = 114REM. */ 
                                                                                /* Use "max-width" because it will adapt to width of screen when minimized. It means if we have enough available space then we will have the width that we specified. If there is not enough width such as the viewport is smaller than the width specified, then it will fit 100% of the space that it has. */   

        /*background-color: gray; */
        margin: 0 auto;
        
        
                                
           
                                                                                /*  This is the trick to center a block element indide another block element, btw. When we say we want it automatically, that means that the browser when rendering the page will automatically figure out the margin that we want on the left and on the right side. And when it is set to "auto" both left and right will be the same, centered. */                              
        
        &:not(:last-child){
            margin-bottom: $gutter-vertical;                                    /* (We can nest inside .row)  .row:not() Basically the not() argument can be used to bypass (select everything but...) a node such as "last-child" the bottom margin of the boxes so their wont be a gap between the bottom one and the bottom margin. */
           
            @include respond(tab-port){
                margin-bottom: $gutter-vertical-small;
            }
       
        }                                   
        
        @include respond(tab-port){
            max-width: 50rem;
            padding: 0 3rem;
        }
        
        @include clearfix;                                                       /* Retains the height from a collapse of floats. So a little confusing but rememebr the "Clearfix" hack when you float. Remember it collapses so if you do the inspect element on Chrome the height is gonna read height: 0. So we need to use clearfix hack. */



                                                                                
        
        
        
        
                                                                                 /* Use Atribute selector to select a group of elements and spread the attribute to the elements you want, pretty powerful */

        [class^="col-"]{                                                         /* Inside .row Attribute Selctor [src(pic), class, alt ] This lets you select all the attributes that deals with what you choose in an attribute selector./*
                                                                                 /* We use an attribute selector here instead of .___ in order to be able to select the begging, all of it, or the end. Ex: [class^="col-"] - starts; [class*="col-"] - choose any class that contains "col-"; [class$="col-"] - any class that ends in "col-" ; */ /* Also, select links, anchor elements,  and other things */
            /* background-color: orangered; */
            float: left;                                                         /* We always float these colums to the left side. Since this is a float layout we FLOAT everything to the left */ 
            &:not(:last-child){
                margin-right: $gutter-horizontal;                                /* The margin right is for the space AFTER the box and youo add it to all of the boxes except the last one, sort of like the no space between the last bottom bottom box */
            
                @include respond(tab-port){
                    margin-right: 0;
                    margin-bottom: $gutter-vertical-small ;
                }
            
            }

                @include respond(tab-port){
                width: 100% !important;
            }
        }




/* You can manipulate the size of the colums simply by changing variable values, pretty cool */



        .col-1-of-2 {                                                            /* This is where you declare the columns of the box, they come nested inside the .row{ }. */

          width: calc((100% - #{$gutter-horizontal}) / 2);                       /* Basically in order to create a column, you have to grab (100% of the width - the size of the space between the columns aka $gutter-horizontal divided by 2 parts. */
                                                                                 /* In calc() function in CSS, if you want to use a SASS variable, you have to use a hash and wrap it around curly braces. #{$gutter-horizontal} */                                                            
        }
                                                                                 
        .col-1-of-3{
            width: calc((100% - 2 * #{$gutter-horizontal}) / 3);                 /* You want 2 gutter and 3 columns */

        }


        .col-2-of-3{
            width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});               /* 2 of 1-of-3's aka (1 of 3 + 1 of 3) + the gutter width to extend it */

        }



        .col-1-of-4 {
            width: calc((100% - 3 * #{$gutter-horizontal}) / 4);                                             /* You want 3 gutters and 4 columns */

        }


        .col-2-of-4{
            width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});              /* width is like a .col-1-of-4 but 2 times + the gutter*/
        }

        .col-3-of-4{
            width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 *#{$gutter-horizontal});           /* width is like a .col-1-of-4 but 3 times + 2 gutter*/
        }

    }