/*

List the CSS properties as the go on your HTML like they should be back to back.
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

@import "absrtacts/functions";
@import "abstracts/mixins"; 
@import "abstracts/variables";

@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "pages/home";



$color-primary: #55c57a;                     /* This is declaring the variable colors of that green that we are not using */
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

*, 
*::after,                                      /*  You are going to have to include the ::after and ::before objects so that it can inherit, and something goofy is off because the exclusion. */
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;                       /*  This will allow for the inheritance of all other objects from the declaration made now in the body section. **Better coding practice**                                           
                                               /*  box-sizing: border-box; -> -> Move this border-box to the body section*/
                                               /*  (*) Is for universal selector (it will apply to everything): Resets the appearnce to a browser, they can change in appearance */
}

html{                                          /*  Set root font size in order to convert to REM */ 

    font-size: 62.5%;                          /*  root font-size */ /* Why 10 pixels? To make life easier. Now we know that 1 REM = 10 px ; 1 REM is equal exactly the root font-size. */
                                               /*  Going by pixels for font-size is bad practice because it overrides the browser's default font size and then people that want to zoom can no longer zoom */
}                                              /*  So we then have to go by percentages, if you make it 100% then it would by default be 16px if the user wanted to change rootfont size to 18px then the root font size would be 18 px, and so on...
                                                   But we dont want 16 px in this case, we want 10 px so in tis case, you would divide 10/16  =.625 Ex: .625*22(user changes root font size)  = 13.75 px */   



                    /*...........................................................ALL FONT SIZES WERE CHANGED TO REM so for example the padding pixel below was 30px now it is 3 REMS now..................................................*/



body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
                                                /* font-size: 16px;         Commented out, new html font-size made for REM to px conversion */
    line-height: 1.7;
    color: white;                             /* The white border around the webpage */
    padding: 3rem;                              /* Padding - is the thin border around the body edges.*/   

                                                /* HTML declarations changes this !!! = (declare font in the body element, it will be inherited by all child elements of the body.)*/       
    box-sizing: border-box;                     /* Moved here from the universal declaration section. What this means is that box-sizing will now be declared in the body and it will then be inherited by all other objects through the inheritance of the universal declarations */
}

.header{
    height: 95vh;
    background-image:                           /* linear-gradient(
                                                    to right bottom
                                                    ,hsla(111, 55%, 64%, 0.801)
                                                    ,hsla(160, 64%, 43%, 0.801)), */ /*This is for the green shade on the tutorial */
    url(../img/AnimatedMicrochip2.gif);
    background-size: cover;
    background-position: top;

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%)  ; /*image crop*/
    position: relative;                         /* This is the origin for the logo-box and will follow the .header styling and keep it it in position of the header. */ 
     
                                                /* change of viewport height is what will stay consistent w the header, when browser manipulated. */

                                                /* height: 95 % of viewport height is what is shown as you manipulate size of browser. class seletor: header. Background-size: cover - Always tries to fit the element inside of the box aka when you minimize and expand. Background Position (top): Whenever the viewport is adjusted the top always shows.
                                                   linear-gradient( can be to left, to up, to down, right bottom corner)-gradual increase or decrease of color. You can hover over color to 'color pick' (RBGA) red, blue, green, opacity.
                                                   Clip path: polygon (x y, x y, x y, x y ) is for the cut at the top. The first coordinate set: is the top left. You want to X is acroos, Y is up and down. 200px is the top right --(clippy- CSS tool, gives you the coordinates for different designs, cool!) */
 
 &__logo-box{
    position: absolute;                       /* absolute positioning, the header is the parent element, so therefore it shoudld be placed in the header section of CSS. */ 
    top: 3rem;
    left: 4rem;
}

&__logo{
    height: 7rem;                             /* size of the image itself, set the height and the browser will set the width*/
}

&__text-box{
    position:absolute;                        /* use absolute positioning to position it within the header.*/
    top: 30%;                                 /* This is the top text at what level do you want the top (IN RELATION TO THE PARENT --HEADER (in this case) to be on....So basically this measurement will end in the middle if put at 50% so starting from the first letter, so essentially it will be off. Therefore, you must shift it a bit */
    left: 50%; 
    transform: translate(-50%, -50%) ;        /* Literally starts text in the middle at 0, so you gotta shift it to the left, lol. This is the repositioning of the actual element itself (Like within Header parent element the how much you want to translate on X,Y on graph) basically you grab the element itself and shift it 50%, basically centering it, after you had done the absolute positioning, since its going to be off a little bit from the previous alignment.*/
    text-align: center;
}
                                                    
}



.heading-primary{                             /* Carries the shared properties of both the main and sub headings (top and bottom) */ 
    color: white;
    text-transform: uppercase;                /* text lowercase,uppercase, etc */
    backface-visibility: hidden;
    margin-bottom: 8rem;                      /* For the space between Front End Developer and the button, it increases the bottom margin of the box therefore lowers it*/


    &--main{                        /* To put these two texts one under another, is to display them as block level elements. Because block level elements occupy the entire width they have available, and most importantly in this case, they create line breaks, after and before them.*/  
        display: block;                           /* a <span> is an inline element, so its just like text.  which is what this is. */
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 1rem;
    
        
                                                   /* Declare animation sequence here for the top: (primary-main) animation sequence. */
        animation-name: moveInLeft;                /* Reference the animation name you are trying to use aka their properties) */
        animation-duration: 2s;                    /* How long it will last*/
        
        animation-timing-function: ease-out;       /* Specifies how a CSS animation should progress over the duration of each cycle from moveInLeft, (ease-in): animation will start slower. (ease-out): animation will start fast and will become slower. Look up other animation timing functions online */
        
        
                                                   /* animation-delay: 3s; Delays the appearance when you refresh or arrive at the website 
                                                      animation-iteration-count: 3; reiterates the animation sequence 3 times so basically animations the header name three times in a row.  */   
    }
    
    &--sub{
        display: block;
        font-size: 3rem;
        font-weight: 700;
        letter-spacing: 1.7rem;
                                                /* This is for the second text positioning Remember you have to shift it to the left a little further so it can be centered because the text box got shifted a little to the left aka -50% or it'll start of in the dead center, making it look too on the right */ 
        
         animation: moveInRight 2s ease-out;    /* nstead of specifying all the properties from the CSS above, animation-name, duration etc. just use animation: moveInRight */
        backface-visibility: hidden;
    }


}


@keyframes moveInLeft{                      /* These types of animations are more complex, Use @keyframes rule, then name it. You can then dictate what you want it to do at any given time on animation. So you start with 0% and the finish is at 100% which is when the animation finishes.*/

    0%{                                     /* For browser performance what you really ever want to do is only two different properties. One is Opacity and the other is the Transform property */
        opacity: 0;                         /* How do we want the element to look like at the beggining? We want it to be invisible, Opacity: 0;  */
        transform: translateX(-10rem);      /* You want it to start more on the left than in the center so therefore, you have to negative the pixels on the X axis.  */
    }

    80%{
        transform: translateX(1rem);        /* My name at the top start at -100px but ends a little further to the right of the original center, so therefore adding an increase of 120 (20px) from -100px initiitaion. */
    }

    100%{
        opacity: 1;                         /* You want it to reappear at the end so you make Opacity: 1, so that it can reappear. */
        transform: translate(0);            /* How do you want it to look like at 100? You want it back in the middle where it was so therefore translate(0); */
    }
}


@keyframes moveInRight{                     /* You can grow crazy with rotations and other movements */

    0%{                     
        opacity: 0;         
        transform: translateX(10rem);       /* To create the opposite animation for the bottom text, just reverse it so basically you want to start at 100px, a positive which moves right on X */
    }

    80%{
        transform: translateX(-1rem);        /* Also, nudging it an extra 10 a little to the left so itll have that bounce outwards */
    }

    100%{
        opacity: 1;
        transform: translate(0);        
        
    }
}



/* Button animations: */

@keyframes moveInBottom{              /* This is for the button that appears coming up when you reload with the text */ 

    0%{                     
        opacity: 0;         
        transform: translateY(3rem);  /* It is positive because on the Y scale it goes top down, so if you want to move down, it is a positive value */
    }

    
    100%{
        opacity: 1;
        transform: translate(0);        
        
    }
}


.btn{

    &:link,                          /* Link is the special state of a selector when it is an anchor element, so it functions like a link. This is an anchor pseudoclass that activates properties under speacil conditions for example, hovering over a button, checkbox is clicked */ 
    &:visited  {                     /* Visited is the state when the user presses the button */  
        text-transform: uppercase;      /* Gets rid of the default blue text with underline style link, no decorations. */ 
        text-decoration: none;   
        padding: 1.5rem 3rem;           /* Padding is for the padding and space around the button link */
        display: inline-block;          /* It appears at the beggineing of main-sub text, so its off. By default it is considered an inline element bc its simply text, but we should display it as in inline block. This way the box model works on this element as if it was just a normal block element.  */    
                                        /* Always inline-block if you want to give paddings, height, or width to elements. */ 
        border-radius: 10rem;           /* Curves out the edges */
        
        transition: all .2s;            /* Use transition property. Then specify which properties you want to animate, can say all, all properties are enabled to be animated.  **This is short hand for animation properties such as moveInLeft, 2 seconds, ease-out, as short hand. */
                                        /* We initialize the transition within the inital state where all the properties that apply to the button, Transform on the 'active' and 'hover' will be animated in relation to its initial state. */
        
        position: relative;             /* In order to create a reference for element position for others*/
        font-size: 1.5rem;              /* Button text font-size */
    }
    
    
    
    &:hover{
        transform: translateY(-.3rem);    /* Transform is very important for animation movement btw. When you hover, the button will go down -3px on Y access (It starts from the top, so it has to be negative to go down */
        box-shadow: 0 1rem 2rem rgba(0,0,0,.2);  /* X Y Blur color */

        &::after {                       /* When we hover the button, then we want some certain styles for the after pseudoelement*/ 
    
            transform: scaleX(1.4) scaleY(1.6);   /* What happens when we hover over it? We want it to be big */ /* On this one, we use 'scale' because scale does is increase the element */ /*If you use scale(2) it increases the element by 2 when you hover over it. If you use X,Y then it coordinates to that. */ 
                                                  /* So where do you declare this transition property? You do it on the initial state, which is the .btn::after
                                                  /* Transform is important */
            opacity: 0;                           /* You need to fade it out as it grows, Opacity at 0 is key to that */                   
        }



    }
    
    &:active{
        transform: translateY(-.1rem);    /* What happens when the button is pressed, it goes down -1px on the Y */
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.2); /* X Y Blur color */
    }
    &--white{                        /* Modifier so (--) */
        background-color: #ffffff;      /* Color of the padding, space around text in the button */
        color: #777777                /* Text color inside button */
        ;
    
        &::after {               /* This creates the circle image that goes under the button to expand out in an animated way, making the button look alive */
            background-color: #ffffff;  /* AFTER pseudo element describes the previous element, so in this case for the whit button, we still want white as it expands out. */
                                          /* It will at first be bigger than the regular because it looks like its still part of the element. So what we want to do is put it behind the button. With that we use absolute positioning like on the previous CSS lines .btn::after */
        }
    
    
    
    
    
    }
     
                                        /* Pseudoelements let style certain parts of elements */
    
    
                                        /* AFTER pseudo elements acts like a virtual element that comes right after the element that we are selecting */
    &::after {                       /* the trick is to create an element exactly like the element button we had, same size, and to put the after element, behind the button, and when we hover out of the button, basically the pseudoelement goes behind the button*/
    
        content: "";                /* specify content property, always neccesary, it can be an empty string, but we have to specify or it wont appear */
        display: inline-block;      /* inline-block, because the button we have is also an incline-block. We want it to look the same */
        height: 100%;               /* We want it look the same, so it will be 100% */
        width: 100%;                /* We want it look the same, so it will be 100%. It works becuase the after element is basically treated like a child element of the button. If we call 100% it is, 100% of the button */ 
        border-radius: 10rem;       /* Border radius the same as btn */ 
        position: absolute;         /* Here we create the positiong for the .btn-white::after which is position: absolute, absolute positioing. */
                                    /* When adding positioning make sure to redirect the positioning because by default, it will go to the header position because w deinfed the header as a position: relative. So create a new position:relative for btn to set it behind the button */
        top: 0;                       
        left: 0;
        z-index: -1;                /* Z element defines the position of the element, if they are on on top of the other. (-1) it is behind */
        transition: all .4s;        /* Insert the transition properties, in the INITIAL STATE, which this particular element coming from the bttom CSS, when it is hovered over. */
    
    }
    
  
   
    
    &--animated {                           /* Animation, must be declared, animation: moveInButton transform properties */
        animation: moveInBottom .5s ease-out .75s;               /* name, duration, animation timing function, delay of appearance */
        animation-fill-mode: backwards;          
    }
    
}




